
package frontend;

import backend.AbstractShapeClass;
import backend.Oval;
import backend.LineSegment;
import backend.Rectangle;
import backend.Shape;
import backend.Triangle;
import com.google.gson.JsonElement;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.codehaus.jackson.JsonProcessingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

public class MainJFrame extends javax.swing.JFrame implements Node{

    OvalInfo circleInfo;
    SquareInfo squareInfo;
    RectangleInfo rectangleInfo;
    LineSegmentInfo lineSegmentInfo;
    TriangleInfo triangleinfo;
    ColorizeWindow colorizeWindow;
    boolean shapeSelectedWithMouse = false;
   boolean cornerSelectedWithMouse = false;
    AbstractShapeClass shapeWithCorners;
    int cornerIndex;
    Point pointOnSelection;
    
    public MainJFrame() {
        initComponents();
        this.setTitle("Vector Drawing Application");
        updateComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        colorizeButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        ovalButton = new javax.swing.JButton();
        rectangleButton = new javax.swing.JButton();
        lineSegmentButton = new javax.swing.JButton();
        squareButton = new javax.swing.JButton();
        myPanel = new backend.MyPanel();
        triangleButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Save = new javax.swing.JMenuItem();
        Load = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Select Shape");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        colorizeButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        colorizeButton.setText("Colorize");
        colorizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        ovalButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ovalButton.setText("Oval");
        ovalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ovalButtonActionPerformed(evt);
            }
        });

        rectangleButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rectangleButton.setText("Rectangle");
        rectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleButtonActionPerformed(evt);
            }
        });

        lineSegmentButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lineSegmentButton.setText("Line Segment");
        lineSegmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineSegmentButtonActionPerformed(evt);
            }
        });

        squareButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        squareButton.setText("Square");
        squareButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareButtonActionPerformed(evt);
            }
        });

        myPanel.setBackground(new java.awt.Color(255, 255, 255));
        myPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                myPanelMouseDragged(evt);
            }
        });
        myPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                myPanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                myPanelMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                myPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout myPanelLayout = new javax.swing.GroupLayout(myPanel);
        myPanel.setLayout(myPanelLayout);
        myPanelLayout.setHorizontalGroup(
            myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 776, Short.MAX_VALUE)
        );
        myPanelLayout.setVerticalGroup(
            myPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );

        triangleButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        triangleButton.setText("Triangle");
        triangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleButtonActionPerformed(evt);
            }
        });

        copyButton.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        jMenu1.add(Save);

        Load.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Load.setText("Load");
        Load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadActionPerformed(evt);
            }
        });
        jMenu1.add(Load);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(colorizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(triangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(ovalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lineSegmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(squareButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(rectangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(myPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(triangleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rectangleButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lineSegmentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ovalButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(squareButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(myPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(colorizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(140, 140, 140))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void ovalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ovalButtonActionPerformed
        this.setVisible(false);
        if(circleInfo == null){
            circleInfo = new OvalInfo(myPanel, jComboBox1);
            circleInfo.setParentNode(this);
        }
        circleInfo.setVisible(true);
    }//GEN-LAST:event_ovalButtonActionPerformed

    private void squareButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareButtonActionPerformed
        this.setVisible(false);
        if(squareInfo == null){
            squareInfo = new SquareInfo(myPanel, jComboBox1);
            squareInfo.setParentNode(this);
        }
        squareInfo.setVisible(true);
    }//GEN-LAST:event_squareButtonActionPerformed

    private void lineSegmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineSegmentButtonActionPerformed
        this.setVisible(false);
        if(lineSegmentInfo == null){
            lineSegmentInfo = new LineSegmentInfo(myPanel, jComboBox1);
            lineSegmentInfo.setParentNode(this);
        }
        lineSegmentInfo.setVisible(true);
    }//GEN-LAST:event_lineSegmentButtonActionPerformed

    private void rectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleButtonActionPerformed
        this.setVisible(false);
        if(rectangleInfo == null){
            rectangleInfo = new RectangleInfo(myPanel, jComboBox1);
            rectangleInfo.setParentNode(this);
        }
        rectangleInfo.setVisible(true);
    }//GEN-LAST:event_rectangleButtonActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void colorizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeButtonActionPerformed
  
        if(this.jComboBox1.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null,"No shape selected");
        }
        else{
            Shape[] shapes = myPanel.getShapes();
            for(int i=0; i<shapes.length; i++){
                if(this.jComboBox1.getSelectedItem().toString().equals(shapes[i].getName())){
                    Color defaultColor = shapes[i].getColor();
                    Color defaultFillColor;
                    try{
                        defaultFillColor = shapes[i].getFillColor();
                    }
                    catch(Exception e){
                        defaultFillColor = null;
                    }
                    
                    this.setVisible(false);
                    if(colorizeWindow == null){
                        colorizeWindow = new ColorizeWindow(myPanel, jComboBox1, defaultColor, defaultFillColor);
                        colorizeWindow.setParentNode(this);
                    }
                    colorizeWindow.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_colorizeButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        
        if(this.jComboBox1.getSelectedItem() == null){
            JOptionPane.showMessageDialog(null,"No shape selected");
        }
        else{
            Shape[] shapes = myPanel.getShapes();
            for(int i=0; i<shapes.length; i++){
                if(this.jComboBox1.getSelectedItem().toString().equals(shapes[i].getName())){
                    myPanel.removeShape(shapes[i]);
                }
            }
            myPanel.refresh(null);
            updateComboBox();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void myPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanelMouseClicked
        
    }//GEN-LAST:event_myPanelMouseClicked

    private void myPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanelMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_myPanelMouseEntered

    private void myPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanelMousePressed
       shapeSelectedWithMouse = false;
        cornerSelectedWithMouse = false;
        
        Point p = mouseClicked(evt);
        pointOnSelection = p;
        
        Shape[] shapes = myPanel.getShapes();
        Shape[] corners = myPanel.getCorners();
        
        for(int i=0; i<corners.length; i++){
            AbstractShapeClass c = (AbstractShapeClass)corners[i];
            if(c.contains(p)){
                cornerSelectedWithMouse = true;
                cornerIndex = i;
            }
        }
        if(!cornerSelectedWithMouse){
            myPanel.removeCorners();
            myPanel.refresh(null);
            for(int i=0; i<shapes.length; i++){
                AbstractShapeClass a = (AbstractShapeClass)shapes[i];
                if(a.contains(p)){
                    shapeSelectedWithMouse = true;
                    myPanel.removeShape(a);
                    myPanel.addShape(a);
                    myPanel.refresh(null);
                    updateComboBox();
                    for(int j=0; j<jComboBox1.getItemCount(); j++){
                        if(jComboBox1.getItemAt(j).equals(a.getName())){
                            jComboBox1.setSelectedIndex(j);
                        }
                    }
                    placeCorners(a);
                    shapeWithCorners = a;
                }
            }
        }
    }//GEN-LAST:event_myPanelMousePressed

    private void myPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myPanelMouseDragged
         if(cornerSelectedWithMouse){
            int newX = mouseClicked(evt).x;
            int newY = mouseClicked(evt).y;
            
            Shape[]corners = shapeWithCorners.generateCornerMarkers();
            
            Point newPoint = new Point(newX, newY);
            
            if(corners.length == 2){ // linesegment resize
                LineSegment l = (LineSegment)shapeWithCorners;
                if(cornerIndex == 0){
                    l.setPosition(newPoint);
                }
                else if(cornerIndex == 1){
                    l.setSecondPoint(newPoint);
                }
                myPanel.removeCorners();
                placeCorners(shapeWithCorners);
                pointOnSelection = newPoint;
            }
            else if(corners.length == 3){ // triangle resize
                Triangle t = (Triangle)shapeWithCorners;
                if(cornerIndex == 0){
                    t.setPosition(newPoint);
                }
                else if(cornerIndex == 1){
                    t.setP2(newPoint);
                }
                else if(cornerIndex == 2){
                    t.setP3(newPoint);
                }
                myPanel.removeCorners();
                placeCorners(shapeWithCorners);
                pointOnSelection = newPoint;
            }
            else if(corners.length == 4 && shapeWithCorners instanceof Rectangle){
                Point cornerPrevPosition = corners[cornerIndex].getPosition();
                
                AbstractShapeClass c = (AbstractShapeClass)corners[cornerIndex];
                
                c.setDraggingPoint(pointOnSelection);
                c.moveTo(newPoint);
                
                int horizontalChange = 0;
                int verticalChange = 0;
                        
                if(cornerIndex == 0){
                    horizontalChange = cornerPrevPosition.x - c.getPosition().x;
                    verticalChange = cornerPrevPosition.y - c.getPosition().y;
                    
                    shapeWithCorners.setPosition(new Point(c.getPosition().x + 3, c.getPosition().y + 3));
                }
                else if(cornerIndex == 1){
                    horizontalChange = c.getPosition().x - cornerPrevPosition.x;
                    verticalChange = cornerPrevPosition.y - c.getPosition().y;
                    
                    shapeWithCorners.setPosition(new Point(shapeWithCorners.getPosition().x, c.getPosition().y + 3));
                }
                else if(cornerIndex == 2){
                    horizontalChange = cornerPrevPosition.x - c.getPosition().x;
                    verticalChange = c.getPosition().y - cornerPrevPosition.y;
                    
                    shapeWithCorners.setPosition(new Point(c.getPosition().x + 3, shapeWithCorners.getPosition().y));
                }
                else if(cornerIndex == 3){
                    horizontalChange = c.getPosition().x - cornerPrevPosition.x;
                    verticalChange = c.getPosition().y - cornerPrevPosition.y;
                }
                rearrangeCorners(corners, shapeWithCorners);
                Rectangle r = (Rectangle)shapeWithCorners;
                r.resize(horizontalChange, verticalChange);
               
                myPanel.removeCorners();
                placeCorners(shapeWithCorners);
                pointOnSelection = newPoint;
            }
            else if(corners.length == 4 && shapeWithCorners instanceof Oval){
                
                AbstractShapeClass c = (AbstractShapeClass)corners[cornerIndex];
                Oval o = (Oval)shapeWithCorners;
                
                c.setDraggingPoint(pointOnSelection);
                c.moveTo(newPoint);
                
                if(cornerIndex == 0){
                    o.setHorizontalDiameter((corners[1].getPosition().x - c.getPosition().x));
                    o.setVerticalDiameter((corners[2].getPosition().y - c.getPosition().y));
                    o.setPosition(c.getPosition());
                }
                else if(cornerIndex == 1){
                    o.setHorizontalDiameter((c.getPosition().x - corners[0].getPosition().x));
                    o.setVerticalDiameter((corners[3].getPosition().y - c.getPosition().y));
                    
                    o.setPosition(new Point(corners[0].getPosition().x, c.getPosition().y));
                }
                else if(cornerIndex == 2){
                    o.setHorizontalDiameter((corners[3].getPosition().x - c.getPosition().x));
                    o.setVerticalDiameter((c.getPosition().y - corners[0].getPosition().y));
                    
                    o.setPosition(new Point(c.getPosition().x, corners[0].getPosition().y));
                }
                else if(cornerIndex == 3){
                    o.setHorizontalDiameter((c.getPosition().x - corners[2].getPosition().x));
                    o.setVerticalDiameter((c.getPosition().y - corners[1].getPosition().y));
                }
                rearrangeCorners(corners, shapeWithCorners);
                myPanel.removeCorners();
                placeCorners(shapeWithCorners);
                pointOnSelection = newPoint;
            }
            myPanel.refresh(null);
        }
        if(shapeSelectedWithMouse){
            int newX;
            int newY;
            Shape[] shapes = myPanel.getShapes();
            
            newX = mouseClicked(evt).x;
            newY = mouseClicked(evt).y;
            
            for(int i=0; i<shapes.length; i++){
                if(this.jComboBox1.getSelectedItem().toString().equals(shapes[i].getName())){
                    myPanel.removeCorners();
                    myPanel.refresh(null);
                    
                    AbstractShapeClass a = (AbstractShapeClass)shapes[i];
                    a.setDraggingPoint(pointOnSelection);
                    a.moveTo(new Point(newX, newY));
                    
                    placeCorners(a);
                    
                    myPanel.refresh(null);
                }
            }
            pointOnSelection = new Point(newX, newY);
        }
    }//GEN-LAST:event_myPanelMouseDragged

    private void triangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleButtonActionPerformed
        this.setVisible(false);
        if(triangleinfo == null){
            triangleinfo = new TriangleInfo(myPanel, jComboBox1);
            triangleinfo.setParentNode(this);
        }
        triangleinfo.setVisible(true);
    }//GEN-LAST:event_triangleButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        // TODO add your handling code here:
        String name;
        Shape[] shapes = myPanel.getShapes();
        for(int i=0; i<shapes.length; i++){   
            if(this.jComboBox1.getSelectedItem().toString().equals(shapes[i].getName())){
                if(this.jComboBox1.getSelectedItem().toString().contains("Oval")){
                    Oval c1 = (Oval) shapes[i];
                    Oval c2= new Oval(c1.getPosition(),c1.getHorizontalDiameter(),c1.getVerticalDiameter() );
                    myPanel.increaseCircles();
                    name = "Oval_"+myPanel.getNumberOfCircles();
                    c2.setColor(c1.getColor());
                    c2.setFillColor(c1.getFillColor());
                    c2.setName(name);
                    myPanel.addShape(c2);
                    myPanel.refresh(null);
                    updateComboBox();
                }
                else if(this.jComboBox1.getSelectedItem().toString().contains("Square") || this.jComboBox1.getSelectedItem().toString().contains("Rectangle")){
                    Rectangle r1 = (Rectangle)shapes[i];
                    Rectangle r2= new Rectangle(r1.getLength(),r1.getWidth() ,r1.getPosition());
                    myPanel.increaseRectangles();
                    name = "Rectangle_"+myPanel.getNumberOfRectangles();
                    r2.setColor(r1.getColor());
                    r2.setFillColor(r1.getFillColor());
                    r2.setName(name);
                    myPanel.addShape(r2);
                    myPanel.refresh(null);
                    updateComboBox();
                }
                else if(this.jComboBox1.getSelectedItem().toString().contains("Square")){
                    Rectangle r1 = (Rectangle)shapes[i];
                    Rectangle r2= new Rectangle(r1.getLength(),r1.getWidth() ,r1.getPosition());
                    myPanel.increaseSquares();
                    name = "Square_"+myPanel.getNumberOfSquares();
                    r2.setColor(r1.getColor());
                    r2.setFillColor(r1.getFillColor());
                    r2.setName(name);
                    myPanel.addShape(r2);
                    myPanel.refresh(null);
                    updateComboBox();
                } 
                else if(this.jComboBox1.getSelectedItem().toString().contains("Triangle")){
                    Triangle t1 = (Triangle)shapes[i];
                    Triangle t2= new Triangle(t1.getPosition(), t1.getP2(), t1.getP3());
                    myPanel.increaseTriangles();
                    name = "Triangle_"+myPanel.getNumberOfTriangles();
                    t2.setColor(t1.getColor());
                    t2.setFillColor(t1.getFillColor());
                    t2.setName(name);
                    myPanel.addShape(t2);
                    myPanel.refresh(null);
                    updateComboBox();                  
                }
                else if(this.jComboBox1.getSelectedItem().toString().contains("LineSegment")){
                    LineSegment l1 = (LineSegment)shapes[i];
                    LineSegment l2 = new LineSegment(l1.getPosition(), l1.getSecondPoint());
                    myPanel.increaseLineSegments();
                    name = "LineSegment_"+myPanel.getNumberOfLineSegments();
                    l2.setColor(l1.getColor());
                    l2.setFillColor(l1.getFillColor());
                    l2.setName(name);
                    myPanel.addShape(l2);
                    myPanel.refresh(null);
                    updateComboBox();           
                }
                myPanel.refresh(null);
            }
        }        
    }//GEN-LAST:event_copyButtonActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        JSONObject jsonObject = new JSONObject();
        JSONArray jsonShapes = new JSONArray();
        JFileChooser file= new JFileChooser();
        file.showDialog(Save, "Choose File to save");
        String path= file.getSelectedFile().toString();
        Shape[] shapes = myPanel.getShapes(); 
        for(int i=0;i<shapes.length;i++){
            jsonShapes.add(i, shapes[i].toJson());   
        }
        try {
            FileWriter file1 = new FileWriter(path);
            for(int j=0; j<shapes.length; j++){ 
                file1.write(jsonShapes.get(j).toString());
                file1.flush();
                file1.write("\n");
            }
            file1.close();
        }catch(JsonProcessingException e){
            e.printStackTrace();
        }catch (IOException e){
             // TODO Auto-generated catch block
            e.printStackTrace();
        }
        System.out.println("JSON file created: "+jsonObject);      
    }//GEN-LAST:event_SaveActionPerformed

    private void LoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadActionPerformed
        // TODO add your handling code here:
        JSONParser parser = new JSONParser();
        JFileChooser file=new JFileChooser();
        String path=null;
        file.showDialog(Load,"Choose File to Load");
        path=file.getSelectedFile().toString();
        if(path==null)
            return;
        Shape[]a=myPanel.getShapes();
        for (Shape e : a){
            myPanel.removeShape(e);
        }
        try{    
            File f=new File(path);
            Scanner sc=new Scanner(f);
            while(sc.hasNextLine()){
                JSONObject obj = (JSONObject) parser.parse(sc.nextLine());
                String s= (String)obj.get("type");
                System.out.println(s);
                if(s.equals("Circle")){
                    Oval c= (Oval) Oval.jsonToShape(obj) ;
                    myPanel.addShape(c);
                    updateComboBox();
                }
                else if(s.equals("Triangle")){
                    Triangle c= (Triangle) Triangle.jsonToShape(obj);
                    myPanel.addShape(c);
                    updateComboBox();  
                }   
                else if(s.equals("Line")){
                    LineSegment c= (LineSegment) LineSegment.jsonToShape(obj) ;
                    myPanel.addShape(c);
                    updateComboBox();
                }
                else if(s.equals("Rectangle")){
                    Rectangle c= (Rectangle) Rectangle.jsonToShape(obj) ;
                    myPanel.addShape(c);
                    updateComboBox(); 
                }
                myPanel.refresh(null);
                updateComboBox();
            }
        }catch (FileNotFoundException e) {
            e.printStackTrace();
        }catch (IOException e) {
            e.printStackTrace();
        }catch (ParseException ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }     
        for(int i =0; i<myPanel.getShapes().length; i++){
            System.out.print(myPanel.getShapes()[i].getName());
        }
    }//GEN-LAST:event_LoadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Load;
    private javax.swing.JMenuItem Save;
    private javax.swing.JButton colorizeButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JButton lineSegmentButton;
    private backend.MyPanel myPanel;
    private javax.swing.JButton ovalButton;
    private javax.swing.JButton rectangleButton;
    private javax.swing.JButton squareButton;
    private javax.swing.JButton triangleButton;
    // End of variables declaration//GEN-END:variables

    public Point mouseClicked(MouseEvent e) {
        int x=e.getX();
        int y=e.getY();
        
        return new Point(x, y);
    }
    
    public void updateComboBox(){
        jComboBox1.removeAllItems();
        for(int i=0; i<myPanel.getShapes().length; i++){
            jComboBox1.addItem(myPanel.getShapes()[i].getName());
        }
    }
    
    public void reverseNegativeRectangle(Rectangle l){
        if(l.getLength()<0)
            l.setLength(0);
        if(l.getWidth()<0)
            l.setWidth(0);
    }
    
    public void reverseNegativeOval(Oval o){
        if(o.getHorizontalDiameter()<0)
            o.setHorizontalDiameter(0);
        if(o.getVerticalDiameter()<0)
            o.setVerticalDiameter(0);
    }
    
    public void placeCorners(AbstractShapeClass a){
        Shape[]corners = a.generateCornerMarkers();
            for(Shape s: corners){
                myPanel.addCorner(s);
            }
            myPanel.refresh(null);
    }
    
    public void rearrangeCorners(Shape[] s, AbstractShapeClass a){
        if(a instanceof Rectangle){
            
            Rectangle l = (Rectangle)a;
            
            if(cornerIndex == 0){
                if(s[0].getPosition().y >= s[2].getPosition().y){
                    reverseNegativeRectangle(l);
                    a.setPosition(new Point(s[2].getPosition().x + 3, s[2].getPosition().y + 3));
                    cornerIndex = 2;
                }
                if(s[0].getPosition().x >= s[1].getPosition().x){
                    reverseNegativeRectangle(l);
                    a.setPosition(new Point(s[1].getPosition().x + 3, s[1].getPosition().y + 3));
                    cornerIndex = 1;
                }
            }
            else if(cornerIndex == 1){
                if(s[1].getPosition().y >= s[3].getPosition().y){
                    reverseNegativeRectangle(l);
                    a.setPosition(new Point(s[2].getPosition().x + 3, s[2].getPosition().y + 3));
                    cornerIndex = 3;
                }
                if(s[1].getPosition().x <= s[0].getPosition().x){
                    reverseNegativeRectangle(l);
                    a.setPosition(new Point(s[1].getPosition().x + 3, s[1].getPosition().y + 3));
                    cornerIndex = 0;
                }
            }
            else if(cornerIndex == 2){
                if(s[2].getPosition().y <= s[0].getPosition().y){
                    reverseNegativeRectangle(l);
                    a.setPosition(new Point(s[2].getPosition().x + 3, s[2].getPosition().y + 3));
                    cornerIndex = 0;
                }
                else if(s[2].getPosition().x >= s[3].getPosition().x){
                    reverseNegativeRectangle(l);
                    a.setPosition(new Point(s[1].getPosition().x + 3, s[1].getPosition().y + 3));
                    cornerIndex = 3;
                }
            }
            else if(cornerIndex == 3){
                if(s[3].getPosition().y <= s[1].getPosition().y){
                    reverseNegativeRectangle(l);
                    a.setPosition(new Point(s[2].getPosition().x + 3, s[2].getPosition().y + 3));
                    cornerIndex = 1;
                }
                if(s[3].getPosition().x <= s[2].getPosition().x){
                    reverseNegativeRectangle(l);
                    a.setPosition(new Point(s[1].getPosition().x +3, s[1].getPosition().y + 3));
                    cornerIndex = 2;
                }
            }
        } 
        else if(a instanceof Oval){
            
            Oval o = (Oval)a;
            
            if(cornerIndex == 0){
                if(s[0].getPosition().y >= s[2].getPosition().y){
                    reverseNegativeOval(o);
                    a.setPosition(s[2].getPosition());
                    cornerIndex = 2;
                }
                if(s[0].getPosition().x >= s[1].getPosition().x){
                    reverseNegativeOval(o);
                    a.setPosition(s[1].getPosition());
                    cornerIndex = 1;
                }
            }
            else if(cornerIndex == 1){
                if(s[1].getPosition().y >= s[3].getPosition().y){
                    reverseNegativeOval(o);
                    a.setPosition(s[2].getPosition());
                    cornerIndex = 3;
                }
                if(s[1].getPosition().x <= s[0].getPosition().x){
                    reverseNegativeOval(o);
                    a.setPosition(s[1].getPosition());
                    cornerIndex = 0;
                }
            }
            else if(cornerIndex == 2){
                if(s[2].getPosition().y <= s[0].getPosition().y){
                    reverseNegativeOval(o);
                    a.setPosition(s[2].getPosition());
                    cornerIndex = 0;
                }
                else if(s[2].getPosition().x >= s[3].getPosition().x){
                    reverseNegativeOval(o);
                    a.setPosition(s[1].getPosition());
                    cornerIndex = 3;
                }
            }
            else if(cornerIndex == 3){
                if(s[3].getPosition().y <= s[1].getPosition().y){
                    reverseNegativeOval(o);
                    a.setPosition(s[2].getPosition());
                    cornerIndex = 1;
                }
                if(s[3].getPosition().x <= s[2].getPosition().x){
                    reverseNegativeOval(o);
                    a.setPosition(s[1].getPosition());
                    cornerIndex = 2;
                }
            }
        }
    }
    
    @Override
    public void setParentNode(Node n) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public Node getParentNode() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
